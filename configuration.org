#+TITLE: Emacs Configuration
This file contains every thing from [[https://github.com/neppramod/java_emacs/blob/master/emacs-configuration.org][Java Programming in Emacs]] and more

* Setup
  Since this is an org file, I am using ~org-babel-load-file~ command to load this file from [[init.el]] file. Emacs loads [[init.el]] when it starts. I have setup a variable called ~EMACS_DIR~ to point to *.emacs.d* as the setup directory. Adjust it to match your system. To speed up loading time of emacs, I have ~used gc-cons-threshold~ and ~gc-cons-percentage~ variables, before and after loading this configuration file. I have set ~gc-cons-threshold~ value to 300 mb after startup. Adjust it to comfortable value according to memory in your system. ~lsp-java~ package however has ~1GB~ setup as default.

** Setup repository in org file
In the following code block, we will initialize package repositories and after that install ~use-package~. This package is used to install other packages.

 #+BEGIN_SRC emacs-lisp
 (require 'package)

 (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                          ("elpa" . "https://elpa.gnu.org/packages/")
			  ("org" . "https://orgmode.org/elpa/")
 ))


 (package-initialize)

 ; Fetch the list of packages available 
 (unless package-archive-contents (package-refresh-contents))

 ; Install use-package
 (setq package-list '(use-package))
 (dolist (package package-list)
 (unless (package-installed-p package) (package-install package)))
 #+END_SRC

** Looks
#+BEGIN_SRC emacs-lisp

  ;; Theme
  (load-theme 'tsdh-dark)

  ;; Font
  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-14"))

  ;; Hide Menubar, toolbar and scrollbar
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Inhibit startup screen and make scratch buffer clean
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message "")

  ;; Enable soft-wrap. Also set syntax highlighting for longer lines
  (global-visual-line-mode 1)
  (setq whitespace-line-column 1000) 

  ;; Set language and coding system to UTF-8
  (set-language-environment "UTF-8")

  ;; Disable annoying ring-bell when backspace key is pressed
  (setq ring-bell-function 'ignore)

  ;; Maintain a list of recent files opened
  (recentf-mode 1)
  (setq recentf-max-saved-items 50)

  ;; Coding (Enable ending brackets)
  (electric-pair-mode 1)

  ;; Set tab width for codign to 4
  (setq c-basic-offset 4)

#+END_SRC

* Project Management and Coding
** Helm
Helm allows for easy completion of commands.
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :init
    (helm-mode 1)
    (progn (setq helm-buffers-fuzzy-matching t)))
#+end_src
** Projectile
Use various utilities for managing project.
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :custom
      ((projectile-completion-system 'helm))
    :ensure t
    :init
    (projectile-mode +1))
#+end_src
** Magit
Magit works with git projects
#+begin_src emacs-lisp
  (use-package magit :ensure t)
#+end_src
** Language Server Protocol
*** FlyCheck
FlyCheck checks for errors in code at run-time
#+begin_src emacs-lisp
  (use-package flycheck :ensure t :init (global-flycheck-mode))
#+end_src
*** Company Mode
Provides autocomplete. Required for LSP completion
#+begin_src emacs-lisp
  (use-package company :ensure t)
#+end_src
*** Yasnippet
Yasnippet is a template system for Emacs.
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t)
  (use-package yasnippet-snippets :ensure t)
#+end_src
*** Which Key
Visually guide keys
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
*** LSP
#+begin_src emacs-lisp

  (use-package lsp-mode
    :ensure t
    :hook (
	   (lsp-mode . lsp-enable-which-key-integration)
	   (java-mode . #'lsp-deferred)
	   (c++-mode . #'lsp-deferred)
	   )
    :init (setq 
	   lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
	   lsp-enable-file-watchers nil
	   read-process-output-max (* 1024 1024)  ; 1 mb
	   lsp-completion-provider :capf
	   company-idle-delay 0.0
	   lsp-headerline-breadcrumb-enable t
	   lsp-idle-delay 0.1
	   lsp-lens-mode 1
	   )
    :config 
    (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    (with-eval-after-load 'lsp-intelephense
      (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
    ;; `-background-index' requires clangd v8+!
    (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))
    (yas-global-mode)
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    )


  (use-package lsp-ui
    :ensure t
    :after (lsp-mode)
    :init (setq lsp-ui-doc-delay 1.5
		lsp-ui-doc-position 'bottom
		lsp-ui-doc-max-width 100)
    )

  (use-package lsp-treemacs
    :after (lsp-mode treemacs)
    :ensure t)

  (use-package lsp-java
    :ensure t
    :config (add-hook 'java-mode-hook 'lsp))
#+end_src

** Quickrun
We can use quickrun package to execute code (if it has main).
#+begin_src emacs-lisp
  (use-package quickrun :ensure t)
#+end_src

* Custom Commands
#+begin_src emacs-lisp
  ;; Helm replace popular commands
  (global-set-key (kbd "C-c f") 'helm-recentf)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+end_src
* Notes

** Org-Mode
- ~org-insert-structure-template~  Expand various template to insert in org-mode.
  
** Programming
- ~flycheck-list-errors~  Opens a window that shows live errors.
- ~lsp-treemacs-errors-list~  Same as above, but fancy window

** General
- ~shrink-window-horizontally~  Shrink the window. ~C-x {~. If you want to shrink other window use ~}~
- ~repeat~ Repeat last command. ~C-x z~. For subsequent repeat use ~z~.
- ~universal-argument~ Universal argument can be used with any command. ~C-u~
#+begin_example
To shrink a window to right, you can use ~C-u 10 C-x {~, then repeat the command with ~C-x z~ and then keep on repeating it with ~z~.   
#+end_example
