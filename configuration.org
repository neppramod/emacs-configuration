#+TITLE: Emacs Configuration
  This file contains basic emacs configuration

* Initialize use-package
** Set repo using package and initialize use-package
   #+BEGIN_SRC emacs-lisp
   (require 'package)

   (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
			 ("elpa" . "http://tromey.com/elpa/")
                            ("gnu" . "http://elpa.gnu.org/packages/")
                            ("marmalade" . "http://marmalade-repo.org/packages/")))

   (package-initialize)

   ; Fetch the list of packages available 
   (unless package-archive-contents (package-refresh-contents))

    ; Install use-package
    (setq package-list '(use-package))
    (dolist (package package-list)
    (unless (package-installed-p package) (package-install package)))

   #+END_SRC

* Basic bells and whistles settings
  #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (global-linum-mode 0)
  (setq whitespace-line-column 1000) ;; Longer whitespace
  (setq ring-bell-function 'ignore)
  (setq-default sp-escape-quotes-after-insert nil) ;; Escape quotes properly
  (setq bookmark-save-flag 1) ; everytime bookmark is changed, automatically save
  (desktop-save-mode 1)       ; save session, so that it loads next time
  (recentf-mode 1)            ; Maintain a list of recent files opened
  (setq recentf-max-saved-items 50)
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))   ; Move all temporary backup files to backup folder
  (electric-pair-mode 1)      ; Automatically add ending brackets and braces
  (show-paren-mode 1)         ; Highlight matching brackets and braces
  #+END_SRC

* Looks
*** Theme
    #+BEGIN_SRC emacs-lisp
    (use-package solarized-theme 
    :ensure t
    :init
    (load-theme 'solarized-dark t))
    
    #+END_SRC

*** Font
    Note: Make sure following font is installed. [[https://dejavu-fonts.github.io/Download.html][Download Dejavu Fonts]]
    #+BEGIN_SRC emacs-lisp
    (set-frame-font "DejaVu Sans Mono 12" nil t) ;; Font
    #+END_SRC

* Custom settings

** Helm Packages

*** Helm
    Helm adds many functionality to search and manage buffers
    #+BEGIN_SRC emacs-lisp
      (use-package helm 
      :ensure t
      :init 
      (helm-mode 1)
      :bind
      (("M-x" . helm-M-x))
      (("C-x C-f" . helm-find-files))
      (("C-c f" . helm-recentf))   ;; Add new key to recentf
      (("C-c g" . helm-grep-do-git-grep)))  ;; Search using grep in a git project

    #+END_SRC

*** Swoop Helm
    Swoop allows easy way to search current buffer
    #+BEGIN_SRC emacs-lisp
    (use-package helm-swoop :ensure t)
    #+END_SRC

*** Wgrep Helm
    Wgrep allows to modify results of grep command and save changes to all affected buffers
    #+BEGIN_SRC emacs-lisp
    (use-package wgrep-helm 
    :defer t
    :custom
    (wgrep-enable-key "e")
    (wgrep-auto-save-buffer t)
    (wgrep-change-readonly-file t))
    #+END_SRC

***  Notes
**** Change multiple files in minibuffer using wgrep
    - ~C-c g~ (~helm-git-do-grep~) command in a git project to search files using grep
    - ~C-c C-s~ save buffer
    - ~C-c C-p~ enable editing in wgrep buffer
    - ~C-h m~ see instruction on particular mode for extra information
    - ~C-c C-k~ discard change in wgrep buffer

** Muban    
   Muban allows to insert templates at specific points in current document using keywords. A key binding of ~C-x M-m~ is assigned to ~muban-apply~, which inserts template associated to certain keyword, defined in *.emacs.muban* file (stored in home directory)
    #+BEGIN_SRC emacs-lisp
     (use-package muban 
     :ensure t
     :bind
     (("C-x M-m" . muban-apply)))
    #+END_SRC

** Org-Bullets
   Org-bullets is used to show asterisk's as bullets in ~org-mode~
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets 
     :ensure t
     :config
     (add-hook 'org-mode-hook 'org-bullets-mode))   
   #+END_SRC

** Key-Chord
   Key-Chord allows to bind regular characters to actions. Here we bind *cc* to jump to characer, and *ww* to jump to word within the document. Using swoop and avy, we can traverse within a document very quickly.
   #+BEGIN_SRC emacs-lisp
   (use-package use-package-chords
   :ensure t
   :config (key-chord-mode 1))
   #+END_SRC

** Avy
   Avy is used to jump within current document using characters
   #+BEGIN_SRC emacs-lisp
     (use-package avy 
     :ensure t
     :chords
     ("cc" . avy-goto-char)
     ("ww" . avy-goto-word-1))   
   #+END_SRC
   
** Htmlize
   Htmlize is used to export org file to html file
    #+BEGIN_SRC emacs-lisp
     (use-package htmlize :ensure t)
    #+END_SRC

** Magit
   Magit package works with git project
   #+BEGIN_SRC emacs-lisp
     (use-package magit :ensure t)
   #+END_SRC

* Programming Language Specific
** Java
   #+BEGIN_SRC emacs-lisp
   ;; Following makes sure curly braces are indented
   (add-hook 'java-mode-hook (lambda () (setq c-default-style "bsd")))
   (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 4 tab-width 4 indent-tabs-mode t)))

   ;; Build java file
   (defun java-build ()
   (interactive)
   (shell-command (concat "javac " buffer-file-name)))

   (defun java-run()
   (interactive)
   (async-shell-command (concat "java " (file-name-base buffer-file-name)))
   (other-window 1))
   #+END_SRC

* Key bindings
** Global

   #+BEGIN_SRC emacs-lisp
   ;; Replace isearch with helmswoop
   (global-set-key (kbd "C-s") 'helm-swoop)
   
   ;; Replace regexp on selected text
   (global-set-key (kbd "C-;") 'replace-regexp)
   #+END_SRC

** Java
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-1") 'java-build)
   (global-set-key (kbd "M-2") 'java-run)
   #+END_SRC
   
** Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
  
*** Notes
    - ~C-x g or magit-status~ Show status of current git project
    - ~s~ Stage files from Unstaged area
    - ~u~ Unstage file
    - ~S~ Stage all files
    - ~U~ reset index to some commits
    - ~cc~ Pressing on staged list, opens commit window
    - ~C-c C-c~ After writing comment, press this to commit the change
    - ~Pp~ In ~magit-status~ window press this to push the changes for unmerged section
    - ~M-x magit-unstage-all~ Remove all changes
    - ~x~ Soft reset (hard when argument is given)
    - ~y~ Show references, tag and branches
    - ~Y~ Cherry
    - ~d~ Diff
    - ~E~ Ediff
    - ~Fp~ Pulling
    - ~g~ Refresh
    - ~z~ Stashing
    - ~r~ Rebaing
    - For more see [[https://magit.vc/manual/magit-refcard.pdf][magit ref-card]]
 
* Notes

** General
   - ~M-/~ Complete word
   - ~C-;~ Replace regular expression in selected text
 
** Macro
   - ~C-x (~ Start macro
   - ~C-x )~ End macro
   - ~C-x e~ End and call macro
   - ~C-u 10 C-x e~ Repeat 10 times

** Manage bookmark
    - Can use ~C-x r l~ to list bookmarks
    - Can use ~C-x r b~ to jump to bookmark
    - Can use ~C-x r m~ to add a bookmark
    - You can bookmark specific point in file by giving different name, bookmark remote, bookmark directory etc.
    
** Dired 
   - ~C-x d~ open dired
   - ~g~ redisplay dired
   - ~C~ copy file to different place
   - ~q~ quit dired
   - ~n, p, <, >~ navigation
   - ~v~ view current file, can quit with ~q~
   - ~o~ view current file in other window
   - ~f or enter~ open/visit current file
   - ~+~ create subdirectory
   - ~=~ compare file at point with file at mark (needs diff program)
   - ~m~ Mark files
   - ~u~ Unmark files
   - ~d~ Mark files for deletion
   - ~x~ Delete files marked for deletion
   - For more info ~C-h m~ or See this [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][dired-ref]] document
 
** Org Mode
   - Org File. Save file with .org extension
   - ~C-c a~ View agenda mode (has various options to manage agenda)
   - ~C-c [~ Enable agenda on current file
   - ~M-Enter~ Create item
   - ~M-Right M-Left~ Create subitem / Change level
   - ~M-Up M-Down~ Change order
   - ~Shift-Right~ Create TODO item, complete
   - ~M-Shift-Enter~ Insert new TODO, Checkbox
   - ~[1/1]~ Create checkbox
   - ~[] C-c C-c~ Complete checkbox
   - ~[/] C-c C-c~ Toggle count completed items
   - ~[%] C-c C-c~ Use percentage
   - ~C-c C-d~ Deadline
   - ~C-c C-c~ Tag with keyword on item
   - ~Tab~ Hide subsection
   - ~Shift-Tab~ Hide/show multiple
   - ~C-Shift-|~ Insert table
   - ~C-c C-c~ Realign table
   - ~Tab~ Realign, move to next field
   - ~M-a M-e~ Beginning / end of row
   - ~M-left M-right~ Left, right
   - ~M-Shift-Left/Right~ Delete/Add column
   - ~M-Shift-Up/Down~ Delete/Add row
   - ~C-c -~ Insert hr line
   - ~C-c l~ Globally insert link to current locaton
   - ~C-c C-l~ Insert a link
   - ~C-c C-o~ Open file link
   - ~C-c &~ Jump back to previous followed link
   - ~C-c C-c~ Code block
   - ~C-c C-o~ Open result of code block
   - For more see [[https://orgmode.org/orgcard.pdf][Org-Mode Reference Card]]
