#+TITLE: Emacs Configuration
  This file contains basic emacs configuration

* Initialize use-package
** Set repo using package and initialize use-package
   #+BEGIN_SRC emacs-lisp
   (require 'package)

   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("elpa" . "http://tromey.com/elpa/")
                            ("gnu" . "http://elpa.gnu.org/packages/")
                            ("marmalade" . "http://marmalade-repo.org/packages/")))

   (package-initialize)

   ; Fetch the list of packages available 
   (unless package-archive-contents (package-refresh-contents))

    ; Install use-package
    (setq package-list '(use-package))
    (dolist (package package-list)
    (unless (package-installed-p package) (package-install package)))

   #+END_SRC

* Basic bells and whistles settings
  #+BEGIN_SRC emacs-lisp

  ;; make return key also do indent, for current buffer only
  (electric-indent-local-mode 1)
  (setq-default tab-always-indent 'complete)	

  ;; make return key also do indent, globally
  (electric-indent-mode 1)
		
  (set-language-environment "UTF-8")
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (global-linum-mode 0)
  (setq whitespace-line-column 1000) ;; Longer whitespace
  (setq ring-bell-function 'ignore)
  (setq-default sp-escape-quotes-after-insert nil) ;; Escape quotes properly
  (setq bookmark-save-flag 1) ; everytime bookmark is changed, automatically save
  (desktop-save-mode 1)       ; save session, so that it loads next time
  (recentf-mode 1)            ; Maintain a list of recent files opened
  (setq recentf-max-saved-items 50)
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))   ; Move all temporary backup files to backup folder
  (electric-pair-mode 1)      ; Automatically add ending brackets and braces
  (show-paren-mode 1)         ; Highlight matching brackets and braces
  (global-visual-line-mode 1)	      ; Soft wrap
  (setq org-export-with-smart-quotes t)  ; Enable smart quotes in org mode
  #+END_SRC
  
* Settings
#+BEGIN_SRC emacs-lisp

 ;; Install exec-path-from-shell-package to load environment variable
 (use-package exec-path-from-shell :ensure t)

 (setq EMACS_DIR "~/.emacs.d/")
 (setq USER_INIT_FILE (concat EMACS_DIR "init.el"))

 ;; Load platform specific variables using specific files. E.g linux.el. 
 ;; Make necessary changes as needed
 (cond ((eq system-type 'windows-nt) (load (concat EMACS_DIR "windows")))
      ((eq system-type 'gnu/linux) (load (concat EMACS_DIR "linux")))
      ((eq system-type 'darwin) (load (concat EMACS_DIR "mac")))
      (t (load-library "default")))
#+END_SRC
* Looks
*** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package material-theme 
     :ensure t 
     :init 
     (load-theme 'material t))
   #+END_SRC
*** Font
    Note: Make sure following font is installed. [[https://dejavu-fonts.github.io/Download.html][Download Dejavu Fonts]]
    #+BEGIN_SRC emacs-lisp
    (set-frame-font "DejaVu Sans Mono 12" nil t) ;; Font
    #+END_SRC

* Custom settings
** Helm Packages
*** Helm
    Helm adds many functionality to search and manage buffers
    #+BEGIN_SRC emacs-lisp
      (use-package helm
      :ensure t
      :init 
      (helm-mode 1)
      :bind
      (("M-x" . helm-M-x))
      (("C-x C-f" . helm-find-files))
      (("C-c f" . helm-recentf))   ;; Add new key to recentf
      (("C-c g" . helm-grep-do-git-grep)))  ;; Search using grep in a git project

    #+END_SRC

*** Swoop Helm
    Swoop allows easy way to search current buffer
    #+BEGIN_SRC emacs-lisp
    (use-package helm-swoop :ensure t)
    #+END_SRC

*** Wgrep Helm
    Wgrep allows to modify results of grep command and save changes to all affected buffers
    #+BEGIN_SRC emacs-lisp
    (use-package wgrep-helm 
    :ensure t
    :custom
    (wgrep-enable-key "e")
    (wgrep-auto-save-buffer t)
    (wgrep-change-readonly-file t))
    #+END_SRC

***  Notes
**** Change multiple files in minibuffer using wgrep
    - ~C-c g~ (~helm-git-do-grep~) command in a git project to search files using grep
    - ~C-c C-s~ save buffer, after edit save to all files
    - ~e~ enable editing in wgrep buffer
    - ~C-h m~ see instruction on particular mode for extra information
    - ~C-c C-k~ discard change in wgrep buffer

** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra :ensure t)
#+END_SRC

** Ace-Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window :ensure t)
#+END_SRC
** Muban    

   Muban allows to insert templates at specific points in current document using keywords. A key binding of ~C-c m~ is assigned to ~muban-apply~, which inserts template associated to certain keyword, defined in *.emacs.muban* file (stored in home directory). See my [[emacs.muban][current setting]]
    #+BEGIN_SRC emacs-lisp
     (use-package muban 
     :ensure t
     :bind
     (("C-c m" . muban-apply)))
    #+END_SRC

** Org-Bullets
   Org-bullets is used to show asterisk's as bullets in ~org-mode~
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets 
     :ensure t
     :config
     (add-hook 'org-mode-hook 'org-bullets-mode))   
   #+END_SRC

** Key-Chord
   Key-Chord allows to bind regular characters to actions.
   #+BEGIN_SRC emacs-lisp
   (use-package use-package-chords
   :ensure t
   :init 
   :config (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.4)
    (setq key-chord-one-key-delay 0.5) ; default 0.2
   )
   #+END_SRC

** Avy
   Avy is used to jump within current document using characters. Here we bind *jc* to jump to characer, and *jw* to jump to word within the document. Later we also bind *js* to enable ~helm-swoop~ to quickly search in current document.
   #+BEGIN_SRC emacs-lisp
     (use-package avy 
     :ensure t
     :chords
     ("jc" . avy-goto-char)
     ("jw" . avy-goto-word-1)
     ("jl" . avy-goto-line))
   #+END_SRC
   
** Htmlize
   Htmlize is used to export org file to html file
    #+BEGIN_SRC emacs-lisp
     (use-package htmlize :ensure t)
    #+END_SRC

** Magit
   Magit package works with git project
   #+BEGIN_SRC emacs-lisp
     (use-package magit :ensure t)
   #+END_SRC
 
** Eyebrowse
   Different configuration for window view. This allows you to setup different window view for particular work. For more [[https://depp.brause.cc/eyebrowse/][see this]]
   #+BEGIN_SRC emacs-lisp
       (use-package eyebrowse 
       :ensure t
       :config (eyebrowse-mode 1))
   #+END_SRC
*** Notes
   - ~C-c C-w 0~ Take to setting number 0
   - ~C-c C-w 1~ Take to setting number 1 and so on
   - C-c C-w ' Go to last setting
   - C-c C-w " Close current setting

** Emacs Multimedia System (EMMS)
     EMMS lets you play media. For this we need to install the player in our system
     before we can configure this. In this example, we need to install ~mplayer~ and
     set its location. This setup is a basic setup and here we only enable music playback.

    #+BEGIN_SRC emacs-lisp
    (use-package emms
    :ensure t
    :config
    (setq exec-path (append exec-path '(MPLAYER_DIRECTORY_LOCATION)))
    (setq emms-source-file-default-directory "~/Music/")  
    (emms-all)
    (emms-default-players)
    (setq  emms-player-mplayer-parameters '("-novideo"))
    )
    #+END_SRC
   
    Find out the location of mplayer installation with ~which mplayer~ in terminal (in mac, linux), and paste above the directory name to MPLAYER_DIRECTORY_LOCATION variable where mplayer is located. 
    E.g ~/user/local/bin~ in Mac. In windows, I installed in ~Documents/mplayer~, so it will be something like ~c:/Users/<username>/Documents/mplayer~

** Pdf-Tools
    Pdf-tools is a set of packages that allows to view pdf in emacs. 
    Follow [[https://github.com/politza/pdf-tools][instructions here]] to install required packages for pdf-tools in your system.
    Once you install the required packages, you can install pdf-tools in emacs using following setting.
    
    I was having one issue with pdf viewing. When I closed the pdf next time it did not
    load the pdf from last position. I found a script, that asks to set the bookmark for current
    pdf file. That is what ~kill-buffer-hook-setup~ does. I also enabled ~pdf-view-midnight-minor-mode~
    so that pdf loads in dark mode.
    
   #+BEGIN_SRC emacs-lisp

   ;; This allows us to save bookmark while closing pdf
   (defun kill-buffer-hook-setup ()
   (if (and buffer-file-name
   (file-name-extension buffer-file-name)
   (string= (downcase (file-name-extension buffer-file-name)) "pdf")
   (yes-or-no-p "Set bookmark with current file name?"))
   (bookmark-set (file-name-nondirectory buffer-file-name) nil)))

   (use-package pdf-tools
   :ensure t
   :config
   ;; initialise
   (pdf-tools-install)
   ;; open pdfs scaled to fit page
   (setq-default pdf-view-display-size 'fit-page)
   ;; automatically annotate highlights
   (setq pdf-annot-activate-created-annotations t)
   ;; use normal isearch
   (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
   ;; turn off cua so copy works
   (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
   ;; save pdf at kill
   (add-hook 'kill-buffer-hook 'kill-buffer-hook-setup)
   ;; midnight node (enable if change to dark font)
   ; (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
   ;; more fine-grained zooming
   (setq pdf-view-resize-factor 1.1)
   ;; keyboard shortcuts
   (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
   (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
   (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
   (define-key pdf-view-mode-map (kbd ",") 'pdf-view-scroll-down-or-previous-page)
   (define-key pdf-view-mode-map (kbd ".") 'pdf-view-scroll-up-or-next-page))
      #+END_SRC
   Once you add above setting, and load the file and after that call ~M-x pdf-tools-install~ if you see similar error message as below
   
   #+BEGIN_EXAMPLE
   /Users/<username>/.emacs.d/elpa/pdf-tools-20200512.1524/build/server/autobuild -i /Users/<username>/.emacs.d/elpa/pdf-tools-20200512.1524/
Failed to recognize this system, trying to continue.
   #+END_EXAMPLE
   
   Copy the whole line and paste it in external terminal emulator. When I ran it in external terminal outside emacs, it worked without any issues. Make sure thought, you have ~pkg-config~, ~poppler~ and ~automake~ installed (in Mac throught HomeBrew). Above link has proper instructions for windows as well.
 
 - Use ~h, t, D, , and .~ for various actions shown in keyboard shortcuts section when using a pdf. The first 3 command changes can be saved, so that it is enabled for external applicaton as well.
 
** Aspell
    Aspell allows to use dictionary to correct words while writing.
    Make sure to install aspell before activating it. 
    
    *Note*: For windows use mingw64 packages and install aspell using following commands.
    #+BEGIN_EXAMPLE
    pacman -S mingw64/mingw-w64-x86_64-aspell
    pacman -S mingw64/mingw-w64-x86_64-aspell-en
    
    Then below set ispell-program-name (see Settings abovel) as
    (setq-default ispell-program-name "C:/msys64/mingw64/bin/aspell.exe")
    #+END_EXAMPLE

    Set location of ~aspell~ executable using ~ispell-program-name~ variable.
 
    #+BEGIN_SRC emacs lisp
    (setq-default ispell-program-name ASPELL_BIN)
    #+END_SRC
    
    
**** Notes
   - ~M-x flyspell-buffer~ Enable grammar highlight in current buffer
   - ~M-C-i~ Auto correct current word

** Which Key
   Show more options for keys
   #+BEGIN_SRC emacs-lisp
    (use-package which-key 
      :ensure t 
      :init
      (which-key-mode)
      )
   #+END_SRC
* Programming Language Specific
** Java
   #+BEGIN_SRC emacs-lisp
   ;; Following makes sure curly braces are indented
   (add-hook 'java-mode-hook (lambda () (setq c-default-style "bsd")))
   (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 4 tab-width 4 indent-tabs-mode t)))

   ;; Build java file
   ;(defun java-build ()
   ;(interactive)
   ;(shell-command (concat "javac " buffer-file-name)))

   ;(defun java-run()
   ;(interactive)
   ;(shell-command (concat "java " (file-name-base buffer-file-name))))


   (use-package quickrun :ensure t)
   (global-set-key (kbd "C-c c") 'quickrun)
   #+END_SRC
** LSP
   #+BEGIN_SRC emacs-lisp
   (setq lsp-keymap-prefix "C-c l")

   ;;(key-chord-define-global "ll" 'lsp-command-keymap)
   (use-package projectile :ensure t)
   (use-package flycheck :ensure t :init (global-flycheck-mode))
   (use-package yasnippet :ensure t :config (yas-global-mode))
   (use-package lsp-mode :ensure t :hook ((lsp-mode . lsp-enable-which-key-integration))
     :config (setq lsp-completion-enable-additional-text-edit nil))
   (use-package company :ensure t)
   (use-package lsp-ui :ensure t)
   (use-package lsp-java :ensure t :config (add-hook 'java-mode-hook 'lsp))
   (use-package dap-mode :ensure t :after lsp-mode :config (dap-auto-configure-mode))
;;   (use-package dap-java :ensure t)
   (use-package helm-lsp :ensure t)
   (use-package lsp-treemacs :ensure t)


   ;; optionally if you want to use debugger

  (use-package dap-mode
    :ensure t :after lsp-mode
    :config
     (require 'dap-java)
     (dap-mode t)
     (dap-ui-mode t))
     
   #+END_SRC
** Scala
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :ensure t
  :interpreter
    ("scala" . scala-mode)
  :mode "\\.s\\(cala\\|bt\\)$"
)
#+END_SRC
* Key bindings
** Global

   #+BEGIN_SRC emacs-lisp
   ;; Search with helm-swoop
   (key-chord-define-global "js" 'helm-swoop)

   ;; Go to buffer menu
   (key-chord-define-global "bb" 'buffer-menu)

   ;; Replace regexp on selected text
   (global-set-key (kbd "C-;") 'replace-regexp)

   (defun reload-init-file() (interactive) (load-file USER_INIT_FILE))
   (global-set-key (kbd "C-c r") 'reload-init-file)
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
  
*** Notes
    - ~C-x g or magit-status~ Show status of current git project
    - ~s~ Stage files from Unstaged area
    - ~u~ Unstage file
    - ~S~ Stage all files
    - ~U~ reset index to some commits
    - ~cc~ Pressing on staged list, opens commit window
    - ~C-c C-c~ After writing comment, press this to commit the change
    - ~Pp~ In ~magit-status~ window press this to push the changes for unmerged section
    - ~M-x magit-unstage-all~ Remove all changes
    - ~x~ Soft reset (hard when argument is given)
    - ~y~ Show references, tag and branches
    - ~Y~ Cherry
    - ~d~ Diff
    - ~E~ Ediff
    - ~Fp~ Pulling
    - ~g~ Refresh
    - ~z~ Stashing
    - ~r~ Rebaing
    - For more see [[https://magit.vc/manual/magit-refcard.pdf][magit ref-card]]
 
* Notes

** General
   - ~M-/~ Complete word
   - ~C-;~ Replace regular expression in selected text
   - ~M-x replace-string C-q C-j RET RET~ Join all lines
   - ~C-x r s~ Type a ~<number>~. Copy to register
   - ~C-x r i~ Type a ~<number>~. Insert register
 
** Macro
   - ~C-x (~ Start macro
   - ~C-x )~ End macro
   - ~C-x e~ End and call macro
   - ~C-u 10 C-x e~ Repeat 10 times
   - ~C-x C-k n some-name~ Name the macro. Now we can execute ~M-x some-name~
   - ~M-x insert-kbd-macro~ Save the macro in [[Macros]] section, thus can be used later

** Rectangles
   - ~C-x r k~ Kill rectangle. Can be yanked.
   - ~C-x r d~ Delete rectangle
   - ~C-x r y~ Yank rectangle
   - ~C-x r c~ Clear rectangle. Does not shift
   - ~C-x r o~ Open rectangle. Shifts right
   - ~C-x r t~ Replace rectangle with string
   - ~M-x string-insert-rectangle~ Insert string in rectangle

** Manage bookmark
    - Can use ~C-x r l~ to list bookmarks
    - Can use ~C-x r b~ to jump to bookmark
    - Can use ~C-x r m~ to add a bookmark
    - You can bookmark specific point in file by giving different name, bookmark remote, bookmark directory etc.
    
** Dired 
   - ~C-x d~ open dired
   - ~g~ redisplay dired
   - ~C~ copy file to different place
   - ~q~ quit dired
   - ~n, p, <, >~ navigation
   - ~^~ Go to parent
   - ~v~ view current file, can quit with ~q~
   - ~o~ view current file in other window
   - ~f or enter~ open/visit current file
   - ~+~ create subdirectory
   - ~=~ compare file at point with file at mark (needs diff program)
   - ~m~ Mark files
   - ~u~ Unmark files
   - ~d~ Mark files for deletion
   - ~x~ Delete files marked for deletion
   - For more info ~C-h m~ or See this [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][dired-ref]] document
 
** Org Mode
   - Org File. Save file with .org extension
   - ~C-c a~ View agenda mode (has various options to manage agenda)
   - ~C-c [~ Enable agenda on current file
   - ~M-Enter~ Create item
   - ~M-Right M-Left~ Create subitem / Change level
   - ~M-Up M-Down~ Change order
   - ~Shift-Right~ Create TODO item, complete
   - ~M-Shift-Enter~ Insert new TODO, Checkbox
   - ~[1/1]~ Create checkbox
   - ~[] C-c C-c~ Complete checkbox
   - ~[/] C-c C-c~ Toggle count completed items
   - ~[%] C-c C-c~ Use percentage
   - ~C-c C-d~ Deadline
   - ~C-c C-c~ Tag with keyword on item
   - ~Tab~ Hide subsection
   - ~Shift-Tab~ Hide/show multiple
   - ~C-Shift-|~ Insert table
   - ~C-c C-c~ Realign table
   - ~Tab~ Realign, move to next field
   - ~M-a M-e~ Beginning / end of row
   - ~M-left M-right~ Left, right
   - ~M-Shift-Left/Right~ Delete/Add column
   - ~M-Shift-Up/Down~ Delete/Add row
   - ~C-c -~ Insert hr line
   - ~C-c l~ Globally insert link to current locaton
   - ~C-c C-l~ Insert a link
   - ~C-c C-o~ Open file link
   - ~C-c &~ Jump back to previous followed link
   - ~C-c C-c~ Code block
   - ~C-c C-o~ Open result of code block
   - For more see [[https://orgmode.org/orgcard.pdf][Org-Mode Reference Card]]

* Hydra
** Movement
#+BEGIN_SRC emacs-lisp

 (defhydra hydra-move
   (:body-pre (next-line))
   "move"
   ("n" next-line  "next line")
   ("p" previous-line "previous line")
   ("f" forward-char "forward")
   ("b" backward-char "backward")
   ("a" beginning-of-line "beginning of line")
   ("e" move-end-of-line  "end of line")
   ("v" scroll-up-command "scroll up")
   ("o" other-window "other window")
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command "scroll down")
   ("l" recenter-top-bottom  "recenter")
   ("q" nil "quit")
   ("SPC" nil "quit")
   )
   (key-chord-define-global "jj" 'hydra-move/body)
#+END_SRC

** Window
#+BEGIN_SRC emacs-lisp

(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))


(defhydra hydra-window ()
   "
Movement^^        ^Split^         ^Switch^		^Resize^
----------------------------------------------------------------
_h_ ←       	_v_ertical    	_b_uffer	        _,_ X←
_j_ ↓        	_x_ horizontal	_f_ind files	_n_ X↓
_k_ ↑        	_z_ undo      	_a_ce 1		_p_ X↑
_l_ →        	_Z_ reset      	_s_wap		_._ X→
_F_ollow	        _D_lt Other   	_S_ave		max_i_mize
_q_ cancel	_o_ other   	_d_elete	        _=_ zoom in
                                _m_ bookmark      _-_ zoom out
"
   ("h" windmove-left )
   ("j" windmove-down )
   ("k" windmove-up )
   ("l" windmove-right )
   ("," hydra-move-splitter-left)
   ("n" hydra-move-splitter-down)
   ("p" hydra-move-splitter-up)
   ("." hydra-move-splitter-right)
   ("=" text-scale-increase "in") 
   ("-" text-scale-decrease "out")
   ("b" buffer-menu "buffer-menu")
   ("m" bookmark-bmenu-list "bookmark")
   ("f" helm-find-files)
   ("F" follow-mode)
   ("a" (lambda ()
          (interactive)
          (ace-window 1)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body))
       )
   ("v" (lambda ()
          (interactive)
          (split-window-right)
          (windmove-right))
       )
   ("x" (lambda ()
          (interactive)
          (split-window-below)
          (windmove-down))
       )
   ("s" (lambda ()
          (interactive)
          (ace-window 4)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body)))
   ("S" save-buffer)
   ("d" delete-window)
   ("D" (lambda ()
          (interactive)
          (ace-window 16)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body))
       )
   ("o" other-window :exit t)
   ("i" delete-other-windows :exit t)
   ("z" (progn
          (winner-undo)
          (setq this-command 'winner-undo))
   )
   ("Z" winner-redo)
   ("q" nil)
   )
   (key-chord-define-global "ww" 'hydra-window/body)
#+END_SRC
** EMMS
#+BEGIN_SRC emacs-lisp
     (defhydra hydra-emms()
     "emms"
     ("i" emms "show interface")
     ("n" emms-next "next")
     ("p" emms-previous "prev")
     ("s" emms-start "start")
     ("e" emms-stop "end")
     ("t" emms-add-directory-tree "add tree")
     ("c" emms-playlist-clear "clear playlist")
     ("ra" emms-random "random")
     ("rp" emms-toggle-repeat-playlist "repeat playlist")
     ("rt" emms-toggle-repeat-track "repeat track")
     ("q" nil "quit")
     )
     (key-chord-define-global "EE" 'hydra-emms/body)
#+END_SRC
