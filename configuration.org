#+TITLE: Emacs Configuration
  This file contains basic emacs configuration

* Package Management
** Set repo using package
   #+BEGIN_SRC emacs-lisp
   (require 'package)

   (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
			 ("elpa" . "http://tromey.com/elpa/")
                            ("gnu" . "http://elpa.gnu.org/packages/")
                            ("marmalade" . "http://marmalade-repo.org/packages/")))
   #+END_SRC

** Add required packages
   #+BEGIN_SRC emacs-lisp
   (setq package-list '(ivy counsel swiper muban org-bullets avy key-chord htmlize wgrep magit afternoon-theme))
   #+END_SRC
   - Ivy provides an interface to list, search, filter and perform actions on a collection of "things". 
   - Counsel adds more to ivy's basic functionality
   - Swiper allows easy way to search current buffer
   - For details in ivy, counse and swiper [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][read this article]] and [[https://oremacs.com/swiper/][this article]]
   - Muban allows to insert templates at specific points in current document using keywords. A key binding of ~C-x M-m~ is assigned to ~muban-apply~, which inserts template associated to certain keyword, defined in *.emacs.muban* file (stored in home directory)
   - Org-bullets is used to show asterisk's as bullets in ~org-mode~
   - Avy is used to jump within current document using characters
   - Key chord allows to bind regular characters to actions. Here we bind *cc* to jump to characer, and *ww* to jump to word within the document. Using swiper and avy, we can traverse within a document very quickly.
   - Htmlize is used to export org file to html file
   - In this setting we are installing ~afternoon-theme~. This can be changed to any theme that you want. Also make sure to change ~load-theme~ setting.
   - Wgrep allows to modify results of grep command and save changes to all effected buffers
   - Magit package works with git project

** Install the packages
   #+BEGIN_SRC emacs-lisp
(package-initialize)

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
   #+END_SRC

* Basic bells and whistles settings
  #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (global-linum-mode 0)
  (setq whitespace-line-column 1000) ;; Longer whitespace
  (setq ring-bell-function 'ignore)
  (setq-default sp-escape-quotes-after-insert nil) ;; Escape quotes properly
  (setq bookmark-save-flag 1) ; everytime bookmark is changed, automatically save
  (desktop-save-mode 1)       ; save session, so that it loads next time
  (recentf-mode 1)            ; Maintain a list of recent files opened
  (setq recentf-max-saved-items 50)
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))   ; Move all temporary backup files to backup folder
  (electric-pair-mode 1)      ; Automatically add ending brackets and braces
  (show-paren-mode 1)         ; Highlight matching brackets and braces
  #+END_SRC

* Enable Packages
  #+BEGIN_SRC emacs-lisp
  (require 'org-bullets) (add-hook 'org-mode-hook 'org-bullets-mode)
  (ivy-mode 1)
  (key-chord-mode +1)
  #+END_SRC

* Settings
** Ivy Settings
   #+BEGIN_SRC emacs-lisp
   (setq ivy-use-virtual-buffers t ivy-count-format "%d/%d ")
   (setq enable-recursive-minibuffers t)
   #+END_SRC

** Wgrep Settings
   #+BEGIN_SRC emacs-lisp
   (setq wgrep-auto-save-buffer t)
   (setq wgrep-change-readonly-file t)
   #+END_SRC

* Font
  Note: Make sure following font is installed. [[https://dejavu-fonts.github.io/Download.html][Download Dejavu Fonts]]
  #+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono 10" nil t) ;; Font
  #+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  ;; Add the theme package in Add required packages section of Package Management
  (load-theme 'afternoon t)
#+END_SRC

* Programming Language Specific
** Java
   #+BEGIN_SRC emacs-lisp
   ;; Following makes sure curly braces are indented
   (add-hook 'java-mode-hook (lambda () (setq c-default-style "bsd")))
   (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 4 tab-width 4 indent-tabs-mode t)))

   ;; Build java file
   (defun java-build ()
   (interactive)
   (shell-command (concat "javac " buffer-file-name)))

   (defun java-run()
   (interactive)
   (async-shell-command (concat "java " (file-name-base buffer-file-name)))
   (other-window 1))
   #+END_SRC

* Key bindings
** Global

   #+BEGIN_SRC emacs-lisp
   ;; Replace isearch with swiper
   (global-set-key (kbd "C-s") 'swiper)
   
   ;; Add new key to recentf
   (global-set-key (kbd "C-c f") 'counsel-recentf)
   #+END_SRC

** Counsel

   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)

   ;; Search using grep in a git project
   (global-set-key (kbd "C-c g") 'counsel-git-grep)
   #+END_SRC

** Avy Jump
   #+BEGIN_SRC emacs-lisp
   (key-chord-define-global "cc" 'avy-goto-char)
   (key-chord-define-global "ww" 'avy-goto-word-1)
   #+END_SRC

** Muban
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x M-m") 'muban-apply)
   #+END_SRC

** Java
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-1") 'java-build)
   (global-set-key (kbd "M-2") 'java-run)
   #+END_SRC
   
** Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
   
* Notes

** Edit multiple files in minibuffer using wgrep
   - Can use ~C-c C-o~ in minibuffer to open the buffer. Can be used in search, bookmark, buffer search etc.
   - Can use ~C-c g~ (~counsel-git-grep~) command in a git project to search files using grep
   - Can use ~C-h m~ to see instruction on particular mode for extra information
   - Can use ~C-c C-p~ to enable editing in wgrep buffer
   - Can use ~C-c C-k~ to discard change in wgrep buffer
 
** Manage bookmark
    - Can use ~C-x r l~ to list bookmarks
    - Can use ~C-x r b~ to jump to bookmark
    - Can use ~C-x r m~ to add a bookmark
    - You can bookmark specific point in file by giving different name, bookmark remote, bookmark directory etc.
    
** Dired 
   - ~C-x d~ open dired
   - ~g~ redisplay dired
   - ~C~ copy file to different place
   - ~q~ quit dired
   - ~n, p, <, >~ navigation
   - ~v~ view current file, can quit with ~q~
   - ~o~ view current file in other window
   - ~f or enter~ open/visit current file
   - ~+~ create subdirectory
   - ~=~ compare file at point with file at mark (needs diff program)
   - ~m~ Mark files
   - ~u~ Unmark files
   - ~d~ Mark files for deletion
   - ~x~ Delete files marked for deletion
   - For more info ~C-h m~ or See this [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][dired-ref]] document
 
** Magit
   - ~C-x g or magit-status~ Show status of current git project
   - ~s~ Stage files from Unstaged area
   - ~u~ Unstage file
   - ~S~ Stage all files
   - ~U~ reset index to some commits
   - ~cc~ Pressing on staged list, opens commit window
   - ~C-c C-c~ After writing comment, press this to commit the change
   - ~Pp~ In ~magit-status~ window press this to push the changes for unmerged section
   - ~M-x magit-unstage-all~ Remove all changes
   - ~x~ Soft reset (hard when argument is given)
   - ~y~ Show references, tag and branches
   - ~Y~ Cherry
   - ~d~ Diff
   - ~E~ Ediff
   - ~Fp~ Pulling
   - ~g~ Refresh
   - ~z~ Stashing
   - ~r~ Rebaing
   - For more see [[https://magit.vc/manual/magit-refcard.pdf][magit ref-card]]

** Org Mode
   - ~C-c C-o~ Open link at point
** Macro
   - ~C-x (~ Start macro
   - ~C-x )~ End macro
   - ~C-x e~ End and call macro
   - ~C-u 10 C-x e~ Repeat 10 times
