# -*- mode: snippet -*-
# name: cp_fenwick_tree_simple
# key: cp_fenwick_tree_simple
# --
#define LSOne(S) ((S) & (-S))
#include <bits/stdc++.h>

using namespace std;

typedef vector<int> vi;

class FenwickTree {
private:
  vi ft;
public:
  // recommended to use explicit for single constructor with parameter
  explicit FenwickTree(int m) 
  {
    ft.assign(m+1, 0);   // create empty ft
  }

  int rsq(int j) {      // rsq(1, j)
    int sum = 0;

    while (j > 0) {
      sum += ft[j];
      j -= LSOne(j);
    }

    return sum;
  }

  int rsq(int i, int j)
  {
    return rsq(j) - rsq(i-1);    // inc/exclusion
  }

  void update(int i, int v)
  {
    int n = ft.size();
    while (i < n) {
      ft[i] += v;
      i += LSOne(i);
    }
  }
};

int main(int argc, char *argv[])
{
  int s[] = {2, 4, 5, 6, 5, 6, 8, 6, 7, 9, 7};
  // f = {0, 0, 1, 0, 1, 2, 3, 2, 1, 1}
  // N = 10
  FenwickTree ft(10);
  ft.update(2, 1);
  ft.update(4, 1);
  ft.update(5, 2);
  ft.update(6, 3);
  ft.update(7, 2);
  ft.update(8, 1);
  ft.update(9, 1);

  for (int i = 1; i < 10; i++) {
    printf("rsq(%d, %d): %d\n", i, i, ft.rsq(i, i));
  }
  // We could also have used rsq(i)
  printf("rsq(%d): %d\n", 0, ft.rsq(0));
  printf("rsq(%d): %d\n", 1, ft.rsq(1));
  printf("rsq(%d): %d\n", 5, ft.rsq(5));  // 0 + 0 + 1 + 0 + 1 + 2

  printf("\nIndividual\n");
  printf("rsq(%d, %d): %d\n", 1, 5, ft.rsq(1, 5)); // 0 + 0 + 1 + 0 + 1 + 2
  printf("rsq(%d, %d): %d\n", 1, 4, ft.rsq(1, 4)); // 0 + 1 + 0 + 1
  printf("rsq(%d, %d): %d\n", 5, 6, ft.rsq(5, 6)); // 2 + 3
  printf("rsq(%d, %d): %d\n", 5, 7, ft.rsq(5, 7));  // 2 + 3 + 2
  printf("rsq(%d, %d): %d\n", 1, 9, ft.rsq(1, 9));  // all (11)

  ft.update(4, 3);  // now 4 has 3 + 1 = 4
  printf("\nAfter update\n");
  printf("rsq(%d, %d): %d\n", 4, 4, ft.rsq(4, 4));  // 4
  printf("rsq(%d, %d): %d\n", 4, 5, ft.rsq(4, 5));  // 4 + 2

  $0
  return 0;
}
